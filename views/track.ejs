<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NutriTrack - Progress Tracking</title>
    <link rel="stylesheet" href="/style.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!-- Add Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="track-page">
        <!-- Navigation -->
        <div class="nav-section">
            <a href="/home" class="btn-back">
                <span class="material-icons">arrow_back</span>
                Back to Home
            </a>
        </div>

        <header class="app-header">
            <h1>Progress Tracking</h1>
            <p>Monitor your weight changes over time</p>
        </header>

        <main class="tracking-container">
            <!-- Weight Graph Section -->
            <div class="graph-section">
                <div class="graph-header">
                    <h2>Weight History</h2>
                    <div class="graph-controls">
                        <select id="timeRange" onchange="updateGraph()">
                            <option value="7">Last 7 days</option>
                            <option value="30">Last 30 days</option>
                            <option value="90">Last 90 days</option>
                            <option value="all">All time</option>
                        </select>
                    </div>
                </div>
                <div class="graph-container">
                    <canvas id="weightChart"></canvas>
                </div>
            </div>

            <!-- Weight History Table -->
            <div class="history-section">
                <h2>Weight History Details</h2>
                <div class="table-container">
                    <table class="history-table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Weight (kg)</th>
                                <th>BMI</th>
                                <th>Body Fat %</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (user.weightHistory && user.weightHistory.length > 0) { %>
                                <% user.weightHistory.sort((a, b) => new Date(b.date) - new Date(a.date)).forEach(entry => { %>
                                    <tr>
                                        <td><%= new Date(entry.date).toLocaleDateString() %></td>
                                        <td><%= entry.weight.toFixed(1) %></td>
                                        <td><%= entry.bmi ? entry.bmi.toFixed(1) : '-' %></td>
                                        <td><%= entry.bodyFatPercentage ? entry.bodyFatPercentage.toFixed(1) : '-' %></td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="4" class="no-data">No weight history available</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Add this after the history-section div -->
            <div class="calendar-section">
                <h2>Gym Streak Calendar</h2>
                <div class="calendar-container">
                    <div class="calendar-header">
                        <button onclick="previousMonth()" class="calendar-nav-btn">
                            <span class="material-icons">chevron_left</span>
                        </button>
                        <h3 id="currentMonth"></h3>
                        <button onclick="nextMonth()" class="calendar-nav-btn">
                            <span class="material-icons">chevron_right</span>
                        </button>
                    </div>
                    <div class="calendar-grid">
                        <div class="calendar-weekdays">
                            <div>Sun</div>
                            <div>Mon</div>
                            <div>Tue</div>
                            <div>Wed</div>
                            <div>Thu</div>
                            <div>Fri</div>
                            <div>Sat</div>
                        </div>
                        <div id="calendarDays" class="calendar-days"></div>
                    </div>
                </div>
            </div>

            <!-- Add this after the calendar-section div -->
            <div class="water-intake-section">
                <h2>Water Intake Tracker</h2>
                
                <!-- Target Setting -->
                <div class="target-setting">
                    <label for="waterTarget">Daily Water Intake Target (ml):</label>
                    <div class="target-input-group">
                        <input type="number" id="waterTarget" min="500" step="100" value="<%= user.waterIntake?.target || 2000 %>">
                        <button onclick="updateWaterTarget()" class="btn btn-primary">Update Target</button>
                    </div>
                </div>

                <!-- Progress Bar -->
                <div class="water-progress-container">
                    <div class="water-progress-info">
                        <span id="currentAmount">0</span>ml / <span id="targetAmount"><%= user.waterIntake?.target || 2000 %></span>ml
                    </div>
                    <div class="water-progress-bar">
                        <div id="waterProgress" class="water-progress" style="width: 0%"></div>
                    </div>
                </div>

                <!-- Add Water Intake -->
                <div class="add-water-intake">
                    <label for="waterAmount">Add Water Intake (ml):</label>
                    <div class="water-input-group">
                        <input type="number" id="waterAmount" min="100" step="100" placeholder="Enter amount">
                        <button onclick="addWaterIntake()" class="btn btn-primary">Add</button>
                    </div>
                </div>

                <!-- Water Intake History Graph -->
                <div class="water-history-graph">
                    <h3>Water Intake History</h3>
                    <canvas id="waterHistoryChart"></canvas>
                </div>
            </div>
        </main>
    </div>

    <%- include('partials/logout') %>

    <script>
        // Initialize the weight chart
        const ctx = document.getElementById('weightChart').getContext('2d');
        let weightChart;

        // Function to format date
        function formatDate(date) {
            return new Date(date).toLocaleDateString();
        }

        // Function to update graph based on time range
        function updateGraph() {
            const timeRange = document.getElementById('timeRange').value;
            const now = new Date();
            let filteredData;

            if (timeRange === 'all') {
                filteredData = weightData;
            } else {
                const daysAgo = new Date(now.setDate(now.getDate() - parseInt(timeRange)));
                filteredData = weightData.filter(entry => new Date(entry.date) >= daysAgo);
            }

            // Sort data by date
            filteredData.sort((a, b) => new Date(a.date) - new Date(b.date));

            // Update chart data
            weightChart.data.labels = filteredData.map(entry => formatDate(entry.date));
            weightChart.data.datasets[0].data = filteredData.map(entry => entry.weight);
            weightChart.update();
        }

        // Prepare data for the chart
        const weightData = <%- JSON.stringify(user.weightHistory || []) %>;

        // Create the chart
        weightChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: weightData.map(entry => formatDate(entry.date)),
                datasets: [{
                    label: 'Weight (kg)',
                    data: weightData.map(entry => entry.weight),
                    borderColor: '#2196F3',
                    backgroundColor: 'rgba(33, 150, 243, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        title: {
                            display: true,
                            text: 'Weight (kg)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Date'
                        }
                    }
                }
            }
        });

        // Initial graph update
        updateGraph();

        // Calendar functionality
        let currentDate = new Date();
        let selectedDate = new Date();

        // Initialize gym streak from user data
        let gymStreak = <%- JSON.stringify(user.gymStreak || []) %>;

        function updateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            // Update month display
            document.getElementById('currentMonth').textContent = 
                new Date(year, month).toLocaleString('default', { month: 'long', year: 'numeric' });
            
            // Get first day of month and total days
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const totalDays = lastDay.getDate();
            const startingDay = firstDay.getDay();
            
            // Clear previous calendar
            const calendarDays = document.getElementById('calendarDays');
            calendarDays.innerHTML = '';
            
            // Add empty cells for days before first of month
            for (let i = 0; i < startingDay; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day empty';
                calendarDays.appendChild(emptyDay);
            }
            
            // Add days of month
            for (let day = 1; day <= totalDays; day++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                dayElement.textContent = day;
                
                // Check if this date is in the gym streak
                const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                if (gymStreak.includes(dateStr)) {
                    dayElement.classList.add('gym-day');
                }
                
                // Add click handler
                dayElement.onclick = () => toggleGymDay(dateStr, dayElement);
                
                calendarDays.appendChild(dayElement);
            }
        }

        function previousMonth() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendar();
        }

        function nextMonth() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendar();
        }

        function toggleGymDay(dateStr, element) {
            const index = gymStreak.indexOf(dateStr);
            if (index === -1) {
                gymStreak.push(dateStr);
                element.classList.add('gym-day');
            } else {
                gymStreak.splice(index, 1);
                element.classList.remove('gym-day');
            }
            
            // Save to server
            saveGymStreak();
        }

        function saveGymStreak() {
            fetch('/track/gym-streak', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({ gymStreak })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Gym streak saved successfully');
                }
            })
            .catch(error => console.error('Error saving gym streak:', error));
        }

        // Initialize calendar
        updateCalendar();

        // Water intake tracking
        let currentWaterIntake = <%= user.waterIntake?.currentAmount || 0 %>;
        let waterTarget = <%= user.waterIntake?.target || 2000 %>;
        let waterHistory = <%- JSON.stringify(user.waterIntake?.history || []) %>;

        function updateWaterTarget() {
            const newTarget = parseInt(document.getElementById('waterTarget').value);
            if (newTarget >= 500) {
                waterTarget = newTarget;
                document.getElementById('targetAmount').textContent = newTarget;
                updateProgressBar();
                saveWaterTarget();
            } else {
                alert('Target must be at least 500ml');
            }
        }

        function addWaterIntake() {
            const amount = parseInt(document.getElementById('waterAmount').value);
            if (amount > 0) {
                currentWaterIntake += amount;
                if (currentWaterIntake > waterTarget) {
                    currentWaterIntake = waterTarget;
                    showCongratulations();
                }
                updateProgressBar();
                saveWaterIntake(amount);
                document.getElementById('waterAmount').value = '';
            }
        }

        function updateProgressBar() {
            const percentage = (currentWaterIntake / waterTarget) * 100;
            document.getElementById('waterProgress').style.width = `${percentage}%`;
            document.getElementById('currentAmount').textContent = currentWaterIntake;
        }

        function showCongratulations() {
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.textContent = '🎉 Congratulations! You\'ve reached your daily water intake goal!';
            document.body.appendChild(toast);
            setTimeout(() => {
                toast.remove();
                currentWaterIntake = 0;
                updateProgressBar();
                saveWaterIntake(0); // Save the reset
            }, 3000);
        }

        function saveWaterTarget() {
            fetch('/track/water-target', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({ target: waterTarget })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Water target saved successfully');
                }
            })
            .catch(error => console.error('Error saving water target:', error));
        }

        function saveWaterIntake(amount) {
            const today = new Date().toISOString().split('T')[0];
            
            fetch('/track/water-intake', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({ 
                    amount,
                    date: today,
                    totalAmount: currentWaterIntake
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Water intake saved successfully');
                    // Update local history
                    const todayEntry = waterHistory.find(entry => 
                        new Date(entry.date).toISOString().split('T')[0] === today
                    );
                    if (todayEntry) {
                        todayEntry.amount = currentWaterIntake;
                    } else {
                        waterHistory.push({
                            date: new Date(),
                            amount: currentWaterIntake,
                            target: waterTarget
                        });
                    }
                    updateWaterHistoryChart();
                }
            })
            .catch(error => console.error('Error saving water intake:', error));
        }

        // Water History Chart
        function updateWaterHistoryChart() {
            const ctx = document.getElementById('waterHistoryChart').getContext('2d');
            const dates = waterHistory.map(entry => new Date(entry.date).toLocaleDateString());
            const amounts = waterHistory.map(entry => entry.amount);
            const targets = waterHistory.map(entry => entry.target);

            if (window.waterHistoryChart) {
                window.waterHistoryChart.destroy();
            }

            window.waterHistoryChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: 'Actual Intake',
                            data: amounts,
                            backgroundColor: '#2196F3',
                            borderColor: '#2196F3',
                            borderWidth: 1
                        },
                        {
                            label: 'Target',
                            data: targets,
                            type: 'line',
                            borderColor: '#FFC107',
                            borderWidth: 2,
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Water Intake (ml)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        }
                    }
                }
            });
        }

        // Initialize water tracking
        updateProgressBar();
        updateWaterHistoryChart();
    </script>
</body>
</html> 